
import java.util.jar.Manifest

apply plugin: 'java'

ext {
  transformImages  = "$buildDir" + '/transformed'
  transformImage   = "$transformImages" + '/' + project(':source.image').profilePrefix
}

configurations {
    jakarta
}

dependencies {
   jakarta 'jakarta.servlet:jakarta.servlet-api:5.0.0-M1'
}

task copyImage(type: Copy) {
  dependsOn ':source.image:unpackImage'
  println 'Source Image: ' + project(':source.image').profileImage
  println 'Target Image: ' + transformImage
  mkdir transformImages
  from file(project(':source.image').profileImage)
  into file(transformImage)

}

task download(type: Copy) {
    from configurations.jakarta 
    into "$transformImage/wlp/dev/api/spec"
}

def addExport() {
    def is = new File("build/tmp/META-INF/MANIFEST.MF").newInputStream()
    Manifest manifest = new Manifest(is);
    for(Object key : manifest.getMainAttributes().keySet()){
        if(key.toString().indexOf("Export-Package") == 0){
            String value =  manifest.getMainAttributes().get(key)
             manifest.getMainAttributes().put(key, value + ',jakarta.servlet.resources;version="5.0.0"')
        } 
    }
    OutputStream os = new FileOutputStream("build/tmp/META-INF/MANIFEST.MF");
    manifest.write(os)
}

task unzipJakarta(type:Copy){
  dependsOn download
  mkdir "$buildDir/tmp/" 
  from zipTree("$transformImage/wlp/dev/api/spec/jakarta.servlet-api-5.0.0-M1.jar")
  into "$buildDir/tmp/"   
}

task copyResource(type: Copy) {
  dependsOn unzipJakarta
  def subDir = "javax/servlet/resources/"
  from zipTree("$transformImage/wlp/dev/api/spec/com.ibm.websphere.javaee.servlet.4.0_1.0.36.jar").matching {include "$subDir/**"}
  into "$buildDir/tmp/"                        
  eachFile { fcp ->
    fcp.path = fcp.path.replaceFirst("javax", 'jakarta')
  }
  includeEmptyDirs false
  doLast {
       addExport()
  }
}

task zipJakarta(type: Zip) {
    dependsOn copyResource
    archiveFileName = "jakarta.servlet-api-5.0.0-M1.jar"
    from "$buildDir/tmp"
    destinationDirectory = file("$transformImage/wlp/dev/api/spec/")
}

String[] bundlesToBeChanged = [  "com.ibm.ws.org.apache.commons.fileupload_1.0.36.jar",
                                 "com.ibm.ws.session_1.0.36.jar",
                                 "com.ibm.ws.webcontainer.cors_1.0.36.jar",
                                 "com.ibm.ws.webcontainer.servlet.3.1_1.0.36.jar",
                                 "com.ibm.ws.webcontainer.servlet.4.0.factories_1.0.36.jar",
                                 "com.ibm.ws.webcontainer.servlet.4.0_1.0.36.jar",
                                 "com.ibm.ws.webcontainer_1.1.36.jar",
                                 "com.ibm.ws.webserver.plugin.runtime_1.0.36.jar" ] 

task deleteJavaxJars() {
    dependsOn zipJakarta
    doLast{
        bundlesToBeChanged.each { file ->
            delete {
                delete "$transformImage/wlp/lib/$file"
                println "wlp/libs/$file deleted"
            }
        }
    }
}

task copyManifests(type: Copy){
    from "$project.projectDir/feature-manifests"
    include "*.mf"
    into "$transformImage/wlp/lib/features"
}

task copyTestApp(type: Copy){
    from "$project.projectDir/test-apps"
    include "*.war"
    eachFile {
        println "Coping Test App '$it' Over"
    }
    into "$transformImage/wlp/lib/usr/servers/defaultServer/dropins"
}

task transformImage() {
    dependsOn deleteJavaxJars
    dependsOn copyManifests
    bundlesToBeChanged.each { file ->
        doLast {
            javaexec {
                classpath = project(':transformer').sourceSets.main.runtimeClasspath
                main = "com.ibm.ws.jakarta.transformer.JakartaTransformer";
                args = [  "-j",
                          "${project(':source.image').profileImage}/wlp/lib/$file",
                          "-o",
                          "$transformImage/wlp/lib/$file",
                          "-tr",
                          "$project.projectDir/rules/jakarta-renames.properties",
                          "-ts",
                           "$project.projectDir/rules/jakarta-selections.properties",
                          "-tv",
                          "$project.projectDir/rules/jakarta-versions.properties"] 
            }
        }

    }
    doLast {
        println "Transformation Complete!: $project.projectDir"
    }
}

task serverStart(type:Exec){
    workingDir "$transformImage/wlp/bin"
    commandLine './server', 'start'

}

task serverStop(type:Exec){
    workingDir "$transformImage/wlp/bin"
    commandLine './server', 'stop'
}