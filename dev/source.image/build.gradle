/*******************************************************************************
 * Copyright (c) 2020 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

// By default download a liberty image, minify the image to 
import java.util.jar.Manifest
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction

defaultTasks 'unpackImage'

// Obtain the standard 'clean' task.

apply plugin: 'base'

//

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath group: 'net.wasdev.wlp.gradle.plugins',
              name: 'liberty-gradle-plugin',
              version: '2.7'
  }
}

apply plugin: 'liberty'

ext {
  libertyVersion = '20.0.0.1'
  profileType    = 'servlet.4'
  libertyCoords  = "io.openliberty:openliberty-webProfile8:$libertyVersion"
}

println 'Liberty Version: ' + libertyVersion
println 'Profile Type: ' + profileType
println 'Liberty Coordinates: ' + libertyCoords

dependencies {
  libertyRuntime libertyCoords
}

ext {
  profileArchives = "$buildDir" + '/imageArchives'
  profilePrefix   = 'liberty.' + libertyVersion + '.' + profileType
  profileArchive  = "$profileArchives" + '/' + profilePrefix + '.zip'
}

task prepareProfiles() {
  println 'Target Archive: ' + profileArchive
  mkdir profileArchives
}

liberty {
  def sourceConfig = 'src/config/' + profileType + '/server.xml'
  println 'Source Configuration: ' + sourceConfig

  server {
    configFile = file(sourceConfig)

    features {
      acceptLicense = true
    }

    packageLiberty {
      archive = profileArchive
      include = 'minify'
    }
  }
}

task createImage {
  dependsOn 'prepareProfiles'
  dependsOn 'installLiberty'
  dependsOn 'libertyCreate'
  dependsOn 'libertyPackage'

  tasks.findByName('libertyCreate').mustRunAfter 'installLiberty'
  tasks.findByName('libertyPackage').mustRunAfter 'libertyCreate'

  //Optional? 
  doLast {
    delete {
      delete "$buildDir/wlp"
    }
  }
}

ext {
  profileImages  = "$buildDir" + '/images/'
  profileImage   = "$profileImages" + '/' + profilePrefix
}

task unpackImage(type: Copy) {
  dependsOn 'createImage'

  println 'Target Image: ' + profileImage
  mkdir profileImages

  from zipTree( file(profileArchive) )
  into file(profileImage)
}
