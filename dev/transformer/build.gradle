plugins {
  id 'java-library'
  id 'eclipse'
  id 'application'
  id 'maven'
}

      String[] bundlesNeedingChange = ["com.ibm.ws.org.apache.commons.fileupload_1.0.36.jar",
                        "com.ibm.ws.session_1.0.36.jar",
                        "com.ibm.ws.webcontainer.cors_1.0.36.jar",
                        "com.ibm.ws.webcontainer.servlet.3.1_1.0.36.jar",
                        "com.ibm.ws.webcontainer.servlet.4.0.factories_1.0.36.jar",
                        "com.ibm.ws.webcontainer.servlet.4.0_1.0.36.jar",
                        "com.ibm.ws.webcontainer_1.1.36.jar",
                        "com.ibm.ws.webserver.plugin.runtime_1.0.36.jar"] 

repositories {
  mavenCentral()
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations {
  archive.extendsFrom(implementation)
  archive.extendsFrom(runtimeOnly)
  archive.extendsFrom(testImplementation)
}

dependencies {
  compile 'biz.aQute.bnd:biz.aQute.bndlib:4.3.1'
  compile 'commons-cli:commons-cli:1.4'

  compile 'org.slf4j:slf4j-simple:1.7.29'

  testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
  testImplementation 'org.assertj:assertj-core:3.14.0'

  testImplementation 'javax.inject:javax.inject:1'

// Can't load jakarta.annotation.api yet,
// since it references ca-parent:2.0.0-RC1, which doesn't yet exist
//
//  testImplementation 'jakarta.annotation:ca-parent:1.3.5'
//  testImplementation 'jakarta.annotation:jakarta.annotation-api:2.0.0-RC1'

  testImplementation 'jakarta.inject:jakarta.inject-api:2.0.0-RC2'

  testImplementation 'jakarta.servlet:jakarta.servlet-api:5.0.0-M1'
  testImplementation 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:2.3.6'
  testImplementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:1.2.7'

  testImplementation 'jakarta.management.j2ee:jakarta.management.j2ee-api:1.1.4'
}

application {
  mainClassName = 'com.ibm.ws.jakarta.transformer.JakartaTransformer'
}

tasks.named('test') {
  useJUnitPlatform()
}

task testJar(type: Jar) {
    archiveBaseName = "test"
    from sourceSets.test.output
}

tasks.named('wrapper') {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}

task showArchives {
  configurations.archive.each {
    println it
  }
}

task downloadArchives(type: Copy) {
  into "${buildDir}/archives"
  from configurations.archive
}

jar {
    manifest {
        attributes 'Main-Class': 'com.ibm.ws.jakarta.transformer.JakartaTransformer'
        attributes 'Class-Path': configurations.compile.collect { it.name }.join(' ')
    }
}

task copyLibs(type: Copy) {
    from configurations.compile
    into 'build/libs/'
}

task runJar() {

bundlesNeedingChange.each { file -> 
  doLast {
    mkdir "../source.image/mini-liberty-image/wlp/lib/jakarta"
    javaexec {
      classpath = sourceSets.main.runtimeClasspath
      main = "com.ibm.ws.jakarta.transformer.JakartaTransformer";
      args = [
              "-j",
              "../source.image/mini-liberty-image/wlp/lib/$file",
              "-o",
              "../source.image/mini-liberty-image/wlp/lib/jakarta/$file"
            ]
    }
  
  }
  }
}

task rename(){


           bundlesNeedingChange.each  { file -> 
            doLast {
               delete{
      delete "../source.image/mini-liberty-image/wlp/lib/$file"
    }
               // println("../source.image/mini-liberty-image/wlp/lib/_$file".toString())
          
}
           }
}


task copyJakartfiedJars(type:Copy){
            from "../source.image/mini-liberty-image/wlp/lib/jakarta/"
            into '../source.image/mini-liberty-image/wlp/lib/'
            doLast{

              delete {
                    delete '../source.image/mini-liberty-image/wlp/lib/jakarta'
              }
            }
}

copyJakartfiedJars.dependsOn rename
rename.dependsOn runJar
runJar.dependsOn copyLibs

